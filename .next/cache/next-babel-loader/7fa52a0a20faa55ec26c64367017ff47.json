{"ast":null,"code":"var _jsxFileName = \"/Users/bc/Develop/next-ecomm/components/Image.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Image } from \"cloudinary-react\";\nimport React, { useState } from \"react\";\nimport useNativeLazyLoading from \"@charlietango/use-native-lazy-loading\";\nimport { useInView } from \"react-intersection-observer\"; // This is a wrapper for cloudynary Image handler\n// Could be replace by any asset provider\n\nexport default ((_ref) => {\n  let rest = Object.assign({}, _ref);\n\n  let initialProps = _objectSpread({}, rest);\n\n  const supportsLazyLoading = useNativeLazyLoading();\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    rootMargin: \"200px 0px\"\n  });\n  return __jsx(\"div\", {\n    className: \"relative block overflow-hidden transition-all ease-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, inView || supportsLazyLoading ? __jsx(Image, _extends({}, initialProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 40\n    }\n  })) : null);\n});","map":{"version":3,"sources":["/Users/bc/Develop/next-ecomm/components/Image.js"],"names":["Image","React","useState","useNativeLazyLoading","useInView","rest","initialProps","supportsLazyLoading","ref","inView","triggerOnce","rootMargin"],"mappings":";;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,kBAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,oBAAP,MAAiC,uCAAjC;AACA,SAASC,SAAT,QAA0B,6BAA1B,C,CAEA;AACA;;AAEA,gBAAe,UAAiB;AAAA,MAAXC,IAAW;;AAC9B,MAAIC,YAAY,qBAAQD,IAAR,CAAhB;;AAEA,QAAME,mBAAmB,GAAGJ,oBAAoB,EAAhD;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBL,SAAS,CAAC;AAC9BM,IAAAA,WAAW,EAAE,IADiB;AAE9BC,IAAAA,UAAU,EAAE;AAFkB,GAAD,CAA/B;AAKA,SACE;AAAK,IAAA,SAAS,EAAC,uDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,IAAIF,mBAAV,GAAgC,MAAC,KAAD,eAAWD,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC,GAA8D,IADjE,CADF;AAKD,CAdD","sourcesContent":["import { Image } from \"cloudinary-react\";\nimport React, { useState } from \"react\";\nimport useNativeLazyLoading from \"@charlietango/use-native-lazy-loading\";\nimport { useInView } from \"react-intersection-observer\";\n\n// This is a wrapper for cloudynary Image handler\n// Could be replace by any asset provider\n\nexport default ({ ...rest }) => {\n  let initialProps = { ...rest };\n\n  const supportsLazyLoading = useNativeLazyLoading();\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    rootMargin: \"200px 0px\",\n  });\n\n  return (\n    <div className=\"relative block overflow-hidden transition-all ease-in\">\n      {inView || supportsLazyLoading ? <Image {...initialProps} /> : null}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}