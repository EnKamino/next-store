{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Image } from \"cloudinary-react\";\nimport React, { useState } from \"react\";\nimport useNativeLazyLoading from \"@charlietango/use-native-lazy-loading\";\nimport { useInView } from \"react-intersection-observer\"; // This is a wrapper for cloudynary Image handler\n// Could be replace by any asset provider\n\nconst CD_API = process.env.CD_API || \"https://res.cloudinary.com/vercel/image/upload/v1592403664/\";\nexport default ((_ref) => {\n  let {\n    width,\n    height,\n    publicId\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"width\", \"height\", \"publicId\"]);\n\n  let initialProps = _objectSpread({\n    width,\n    height,\n    publicId\n  }, rest);\n\n  const supportsLazyLoading = useNativeLazyLoading();\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    rootMargin: \"200px 0px\"\n  });\n  return __jsx(\"div\", {\n    ref: !supportsLazyLoading ? ref : undefined,\n    className: \"relative block overflow-hidden ease-in\",\n    style: {\n      position: \"relative\",\n      paddingBottom: `${height > 0 && width > 0 ? height / width * 100 : 100}%`,\n      background: \"#edf2f7\"\n    }\n  }, inView || supportsLazyLoading ? // <Image loading=\"lazy\" {...initialProps} />\n  __jsx(\"img\", _extends({}, rest, {\n    src: `https://res.cloudinary.com/vercel/image/upload/${height ? `h_${height},` : \"\"}${width ? `w_${width},` : \"\"}/v1592403664/${publicId}`,\n    width: width,\n    height: height,\n    loading: \"lazy\",\n    style: {\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\"\n    }\n  })) : null);\n});","map":null,"metadata":{},"sourceType":"module"}