{"ast":null,"code":"var _jsxFileName = \"/Users/bc/Develop/next-ecomm/components/Image.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Image } from \"cloudinary-react\";\nimport React, { useRef, useEffect } from \"react\"; // This is a wrapper for cloudynary Image handler\n// Could be replace by any asset provider\n\nexport default ((_ref) => {\n  let rest = Object.assign({}, _ref);\n  const [isLoading, setIsLoading] = useState(true);\n  const imageRef = useRef(null);\n\n  const initialProps = _objectSpread(_objectSpread({}, rest), {}, {\n    quality: \"10\"\n  });\n\n  useEffect(() => {\n    initialProps.quality = 100;\n    setIsLoading(false);\n  }, [imageRef]);\n  return __jsx(\"div\", {\n    className: \"\",\n    style: isLoading ? {\n      filter: \"blur(100px)\"\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(Image, _extends({\n    ref: imageRef\n  }, initialProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  })));\n});","map":{"version":3,"sources":["/Users/bc/Develop/next-ecomm/components/Image.js"],"names":["Image","React","useRef","useEffect","rest","isLoading","setIsLoading","useState","imageRef","initialProps","quality","filter"],"mappings":";;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,kBAAtB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC,C,CAEA;AACA;;AAEA,gBAAe,UAAiB;AAAA,MAAXC,IAAW;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;;AACA,QAAMO,YAAY,mCAAQL,IAAR;AAAcM,IAAAA,OAAO,EAAE;AAAvB,IAAlB;;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,CAACC,OAAb,GAAuB,GAAvB;AACAJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHQ,EAGN,CAACE,QAAD,CAHM,CAAT;AAKA,SACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAkB,IAAA,KAAK,EAAEH,SAAS,GAAG;AAAEM,MAAAA,MAAM,EAAE;AAAV,KAAH,GAA+B,EAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAEH;AAAZ,KAA0BC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD,CAfD","sourcesContent":["import { Image } from \"cloudinary-react\";\nimport React, { useRef, useEffect } from \"react\";\n\n// This is a wrapper for cloudynary Image handler\n// Could be replace by any asset provider\n\nexport default ({ ...rest }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const imageRef = useRef(null);\n  const initialProps = { ...rest, quality: \"10\" };\n\n  useEffect(() => {\n    initialProps.quality = 100;\n    setIsLoading(false);\n  }, [imageRef]);\n\n  return (\n    <div className=\"\" style={isLoading ? { filter: \"blur(100px)\" } : {}}>\n      <Image ref={imageRef} {...initialProps} />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}